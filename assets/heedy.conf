/*
    This file represents the default configuration for a heedy server.

    You can override any of these options in your server's heedy.conf,
    or in your plugin's configuration file.

*/

// By default, listen on all interfaces. 
// Set to "localhost:1324" to only listen on localhost
addr=":1324"

// The external URL of the heedy instance. If blank, set to addr
url=""

// Backend API socket address, used by plugins to interact with heedy
api = "unix:heedy.sock"

// The list of users who are given administrative permissions. 
// The user created when setting up heedy is automatically added here
admin_users = []

// These are the builtin plugins that are active by default.
active_plugins = ["notifications","timeseries","python","kv"]

// Forbid the following usernames from being created
forbidden_users = ["admin","heedy","public","users"]

// The SQL app string to use to connect to the database, in the form:
//  <sql type>://<app string>
// By default, heedy uses an sqlite3 database saved in the data subfolder
sql = "sqlite3://heedy.db?_journal=WAL&_busy_timeout=5000"

// frontend gives the javascript module which implements the main UI
frontend = "heedy/main.mjs"
// preload is a list of modules which will be required for the frontend to load
preload = ["main.mjs","dist/vue.mjs","util.mjs","dist/moment.mjs","worker.mjs",
    "dist/codemirror.mjs","dist/draggable.mjs","dist/markdown-it.mjs"]

// The number of bytes to allow in a REST request body. 
// NOTE: This does not apply to datapoint inserts in timeseries, 
// which are allowed to be of arbitrary size 
// TODO: currently it DOES apply to datapoint inserts.
request_body_byte_limit = 4e+6

// Whether or not to permit the public to connect to websockets.
// Note that even if true, they will only have public-level access to events.
// This allows public not to take websocket resources from users
allow_public_websocket = false

// The timeout between asking a plugin nicely to shut down and killing it.
run_timeout = "10s"

// Runtypes that come compiled into heedy's core. The builtin runtype refers to
// built-in code that is run on the given key. The exec runtype allows plugins
// to run arbitrary executables as follows:
//      plugin "myplugin" {
//          run "myexecutable" {
//              type="exec"
//              cmd=["./myexecutable","--arg1"]
//          }
//      }
runtype "builtin" {
    config_schema = {
        "key": {"type": "string"},
        "required": ["key"]
    }
}
runtype "exec" {
    config_schema = {
        "cmd": {"type": "array", "items": {"type": "string"}, "minItems": 1},
        "api": {"type": "string"},
        "required": ["cmd"]
    }
}

// -----------------------------------------------------------------------------
// NOTIFICATIONS
// 

plugin "notifications" {
    version= version
    description= "Allow plugins and apps to notify a user of their status"
    frontend= "notifications/main.mjs"

    run "backend" {
        type = "builtin"
        key = "notifications"
    }

    routes = {
        "/api/notifications": "run:backend"
    }
}


// -----------------------------------------------------------------------------
// DASHBOARD
// 

plugin "dashboard" {
    version= version
    description= join("Dashboards are a builtin object that handles",
                        " display and visualization of info from various sources")
    frontend= "dashboard/main.mjs"

    run "backend" {
        type = "builtin"
        key = "dashboard"
    }

    config_schema = {
        "types": {
            "type": "object",
            "description": "The definitions of all dashboard types",
            "default": {},
            "additionalProperties": { 
                "type": "object", 
                "properties": {
                    "api": {
                        "type":"string"
                    },
                    "query_schema": {
                        "$ref": "http://json-schema.org/draft-07/schema",
                        "default": {}
                    },
                    "frontend_schema": {
                        "$ref": "http://json-schema.org/draft-07/schema",
                        "default": {}
                    }
                },
                "required": ["api"]
            
            }
        }
    }

    types = {
        "dataset": {
            "api": "run:timeseries.backend/dashboard"
        }
    }

}

// The dashboard object is built in - its implementation comes as part of the 
// dashboard plugin. Note that the builtin dashboard object cannot be disabled, 
// even if the plugin itself is inactive. This is because an object type 
// is globally defined in the configuration.
type "dashboard" {

    // meta_schema gives the schema required for dashboard metadata 
    // (in the "meta" field of the dashboard object)
    meta_schema = {}

    routes = {
        "/dashboard": "run:dashboard.backend/object"
        "/dashboard/*": "run:dashboard.backend/object"
    }
}

// -----------------------------------------------------------------------------
// TIMESERIES
// 

plugin "timeseries" {
    version= version
    description= join("A builtin plugin that handles",
                        " time-series data and visualization")
    frontend= "timeseries/main.mjs"
    preload=["dist/json-schema.mjs","dist/downsample.mjs","dist/v-calendar.mjs","timeseries/worker.mjs","timeseries/analysis.mjs"]

    run "backend" {
        type = "builtin"
        key = "timeseries"
    }

    routes = {
        "/api/timeseries/*": "run:backend"
    }

    config_schema = {
        "batch_size": {
            "type": "integer",
            "description": "Size of an average batch of datapoints in the database",
            "default": 1024
        },
        "max_batch_size": {
            "type": "integer",
            "description": "Maximum size of a batch allowed before splitting",
            "default": 2047
        },
        "batch_compression_level": {
            "type": "integer",
            "description": join("Compression level to use when writing batches to database.",
                         "-1 means no compression - but uncompressed databases are incompatible with compressed"),
            "default": 2
        },
        "compress_query_response": {
            "type": "boolean",
            "description": "Whether or not to compress timeseries responses if supported",
            "default": true
        }
    }

}

// The timeseries object is built in - its implementation comes as part of the 
// timeseries plugin. Note that the builtin timeseries object cannot be disabled, 
// even if the plugin itself is inactive. This is because an object type 
// is globally defined in the configuration.
type "timeseries" {

    // meta_schema gives the schema required for timeseries metadata 
    // (in the "meta" field of the timeseries object)
    meta_schema = {
        "schema": {
            "$ref": "http://json-schema.org/draft-07/schema",
            "default": {}
        },
        "required": ["schema"]
    }

    routes = {
        "/timeseries": "run:timeseries.backend/object"
        "/timeseries/*": "run:timeseries.backend/object"
        // "/actions": "run:timeseries.backend/object"
        // "/actions/*": "run:timeseries.backend/object"
        // "/act": "run:timeseries.backend/object"
    }

    // These are the scopes defined specifically for timeseries
    scope = {
        // "act": "Allows intervention"
    }

}

// -----------------------------------------------------------------------------
// KV
// 

plugin "kv" {
    version = version
    description = "Key-value storage for apps and plugins"

    run "backend" {
        type = "builtin"
        key = "kv"
    }

    routes = {
        "/api/kv/*": "run:backend"
    }
}

// -----------------------------------------------------------------------------
// PYTHON
// 

plugin "python" {
    version= version
    description= "Support for running python-based plugins"

    run "backend" {
        type = "builtin"
        key = "python"
    }

    config_schema = {
        "path": {
            "type": "string",
            "description": "Path to the python interpreter to use",
            "default": ""
        },
        "pip_args": {
            "type":"array",
            "items": {"type": "string"},
            "description": join(
                    "Command-line arguments to pass to pip (pip install {args}",
                    " mypackage or pip install {args} -r requirements.txt)"),
            "default": []
        },
        "venv_args": {
            "type":"array",
            "items": {"type": "string"},
            "description": join(
                    "Command-line arguments to pass to venv",
                    " (python -m venv venvs/myplugin {args})"),
            "default": []
        },
        "per_plugin_venvs": {
            "type": "boolean",
            "description": join(
                "Should a venv be created for each python plugin?",
                "Or should it just use the configured python?"
            ),
            "default": true
        }
    }
}

// The python runtype allows running a python file using the Python interpreter
// configured in heedy. Furthermore, it also makes sure any dependecies
// in a requirements.txt are installed before running the file.
runtype "python" {
    config_schema = {
        "path": {
            "type": "string"
        },
        "args": {
            "type": "array",
            "items": {"type": "string"},
            "default": []
        },
        "api": {"type": "string"},
        "required": ["path"]
    }
    api = "run:python.backend/runtypes/python"
}
